const http = require('http');
const fs = require('fs');
const path = require('path');
const os = require('os');

const PORT = process.env.PORT || 10000;
const UPLOADS_DIR = path.join(__dirname, 'uploads');
const FRONTEND_DIR = path.join(__dirname, 'frontend');
const ADMIN_PASSWORD = "admin123";

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
if (!fs.existsSync(UPLOADS_DIR)) {
    fs.mkdirSync(UPLOADS_DIR, { recursive: true });
    console.log('‚úÖ –ü–∞–ø–∫–∞ uploads —Å–æ–∑–¥–∞–Ω–∞');
}

if (!fs.existsSync(FRONTEND_DIR)) {
    fs.mkdirSync(FRONTEND_DIR, { recursive: true });
    console.log('‚úÖ –ü–∞–ø–∫–∞ frontend —Å–æ–∑–¥–∞–Ω–∞');
}

const DB_PATH = path.join(__dirname, 'database.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
    if (!fs.existsSync(DB_PATH)) {
        const defaultData = {
            documents: [],
            settings: {
                adminPassword: ADMIN_PASSWORD
            }
        };
        fs.writeFileSync(DB_PATH, JSON.stringify(defaultData, null, 2));
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    }
}

function readDatabase() {
    try {
        const data = fs.readFileSync(DB_PATH, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        return { documents: [] };
    }
}

function writeDatabase(data) {
    try {
        fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getContentType(ext) {
    const types = {
        '.html': 'text/html; charset=utf-8',
        '.css': 'text/css; charset=utf-8',
        '.js': 'application/javascript; charset=utf-8',
        '.json': 'application/json; charset=utf-8',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.gif': 'image/gif',
        '.pdf': 'application/pdf',
        '.doc': 'application/msword',
        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        '.ppt': 'application/vnd.ms-powerpoint',
        '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        '.txt': 'text/plain; charset=utf-8'
    };
    return types[ext] || 'application/octet-stream';
}

function sendJSONResponse(res, statusCode, data) {
    res.writeHead(statusCode, {
        'Content-Type': 'application/json; charset=utf-8',
        'Access-Control-Allow-Origin': '*'
    });
    res.end(JSON.stringify(data));
}

function sendError(res, statusCode, message) {
    sendJSONResponse(res, statusCode, { 
        success: false, 
        error: message 
    });
}

function sendSuccess(res, data = {}) {
    sendJSONResponse(res, 200, { 
        success: true, 
        ...data 
    });
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function handleAdminLogin(req, res) {
    let body = '';
    
    req.on('data', chunk => {
        body += chunk.toString();
    });
    
    req.on('end', () => {
        try {
            const { password } = JSON.parse(body);
            
            if (password === ADMIN_PASSWORD) {
                sendSuccess(res, { message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' });
            } else {
                sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            }
        } catch (error) {
            sendError(res, 400, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
    });
}

function handleGetDocuments(req, res) {
    try {
        const db = readDatabase();
        sendSuccess(res, { documents: db.documents });
    } catch (error) {
        sendError(res, 500, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    }
}

function handleUploadDocument(req, res) {
    let body = '';
    
    req.on('data', chunk => {
        body += chunk.toString();
    });
    
    req.on('end', () => {
        try {
            const data = JSON.parse(body);
            const db = readDatabase();
            
            const newDocument = {
                id: Date.now().toString(),
                name: data.documentName || `–î–æ–∫—É–º–µ–Ω—Ç ${Date.now()}`,
                originalName: data.originalName || 'document',
                filename: `doc-${Date.now()}.txt`,
                type: data.fileType || 'file',
                category: data.documentCategory || 'general',
                url: `/api/documents/${Date.now()}`,
                uploadDate: new Date().toISOString(),
                isNew: true
            };
            
            db.documents.unshift(newDocument);
            
            if (writeDatabase(db)) {
                sendSuccess(res, { 
                    document: newDocument,
                    message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
                });
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            sendError(res, 500, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        }
    });
}

function handleDeleteDocument(req, res, documentId) {
    try {
        const db = readDatabase();
        const documentIndex = db.documents.findIndex(doc => doc.id === documentId);
        
        if (documentIndex === -1) {
            return sendError(res, 404, '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        db.documents.splice(documentIndex, 1);
        
        if (writeDatabase(db)) {
            sendSuccess(res, { message: '–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω' });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        sendError(res, 500, '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer((req, res) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const pathname = url.pathname;
    
    console.log(`üì® ${req.method} ${pathname}`);
    
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // API routes
    if (pathname === '/api/admin/login' && req.method === 'POST') {
        handleAdminLogin(req, res);
        return;
    }
    
    if (pathname === '/api/documents' && req.method === 'GET') {
        handleGetDocuments(req, res);
        return;
    }
    
    if (pathname === '/api/documents' && req.method === 'POST') {
        handleUploadDocument(req, res);
        return;
    }
    
    if (pathname.startsWith('/api/documents/') && req.method === 'DELETE') {
        const documentId = pathname.split('/')[3];
        handleDeleteDocument(req, res, documentId);
        return;
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ frontend
    if (req.method === 'GET') {
        let filePath;
        
        if (pathname === '/') {
            filePath = path.join(FRONTEND_DIR, 'index.html');
        } else if (pathname === '/admin.html') {
            filePath = path.join(FRONTEND_DIR, 'admin.html');
        } else {
            // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª—ç—à –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
            const relativePath = pathname.startsWith('/') ? pathname.slice(1) : pathname;
            filePath = path.join(FRONTEND_DIR, relativePath);
        }
        
        console.log(`üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        try {
            if (fs.existsSync(filePath) && fs.statSync(filePath).isFile()) {
                const content = fs.readFileSync(filePath);
                const ext = path.extname(filePath).toLowerCase();
                const contentType = getContentType(ext);
                
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(content);
                console.log(`‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${pathname}`);
            } else {
                console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                
                // –ü—Ä–æ–±—É–µ–º index.html –¥–ª—è SPA —Ä–æ—É—Ç–∏–Ω–≥–∞
                const indexFile = path.join(FRONTEND_DIR, 'index.html');
                if (fs.existsSync(indexFile)) {
                    const content = fs.readFileSync(indexFile);
                    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
                    res.end(content);
                    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω index.html –¥–ª—è: ${pathname}`);
                } else {
                    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
                    res.end(`
                        <!DOCTYPE html>
                        <html>
                        <head>
                            <title>404 - –ù–µ –Ω–∞–π–¥–µ–Ω–æ</title>
                            <style>
                                body { 
                                    font-family: Arial, sans-serif; 
                                    margin: 40px; 
                                    text-align: center; 
                                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                    color: white;
                                    min-height: 100vh;
                                    display: flex;
                                    align-items: center;
                                    justify-content: center;
                                }
                                .container { 
                                    max-width: 600px; 
                                    background: rgba(255,255,255,0.95);
                                    color: #333;
                                    padding: 40px;
                                    border-radius: 15px;
                                    box-shadow: 0 15px 35px rgba(0,0,0,0.1);
                                }
                                h1 { color: #e74c3c; margin-bottom: 20px; }
                                a { 
                                    display: inline-block; 
                                    margin-top: 20px; 
                                    padding: 12px 24px; 
                                    background: #3498db; 
                                    color: white; 
                                    text-decoration: none; 
                                    border-radius: 8px;
                                    transition: all 0.3s ease;
                                }
                                a:hover { background: #2980b9; transform: translateY(-2px); }
                            </style>
                        </head>
                        <body>
                            <div class="container">
                                <h1>‚ùå 404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
                                <p>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: <strong>${pathname}</strong></p>
                                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                                <a href="/">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                            </div>
                        </body>
                        </html>
                    `);
                }
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            res.writeHead(500);
            res.end('Internal Server Error');
        }
        return;
    }
    
    // 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    res.writeHead(404);
    res.end('Not Found');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
initDatabase();

server.listen(PORT, '0.0.0.0', () => {
    const localIP = getLocalIP();
    
    console.log('=== üåê –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò ===');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:${PORT}`);
    console.log(`üìç –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: http://${localIP}:${PORT}`);
    console.log(`üìç –ê–¥–º–∏–Ω–∫–∞: http://localhost:${PORT}/admin.html`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∫–∏: ${ADMIN_PASSWORD}`);
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log('==========================================');
});

function getLocalIP() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const interface of interfaces[name]) {
            if (interface.family === 'IPv4' && !interface.internal) {
                return interface.address;
            }
        }
    }
    return 'localhost';
}

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});