const http = require('http');
const fs = require('fs');
const path = require('path');
const os = require('os');
const { StringDecoder } = require('string_decoder');

const PORT = process.env.PORT || 10000;
const UPLOADS_DIR = path.join(__dirname, 'uploads');
const FRONTEND_DIR = path.join(__dirname, 'frontend'); // –ü–∞–ø–∫–∞ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
const ADMIN_PASSWORD = "admin123";

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
if (!fs.existsSync(UPLOADS_DIR)) {
    fs.mkdirSync(UPLOADS_DIR, { recursive: true });
    console.log('‚úÖ –ü–∞–ø–∫–∞ uploads —Å–æ–∑–¥–∞–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ frontend
if (!fs.existsSync(FRONTEND_DIR)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
} else {
    console.log('‚úÖ –ü–∞–ø–∫–∞ frontend –Ω–∞–π–¥–µ–Ω–∞');
}

const DB_PATH = path.join(__dirname, 'database.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
    if (!fs.existsSync(DB_PATH)) {
        const defaultData = {
            documents: [],
            settings: {
                adminPassword: ADMIN_PASSWORD
            }
        };
        fs.writeFileSync(DB_PATH, JSON.stringify(defaultData, null, 2));
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    }
}

function readDatabase() {
    try {
        const data = fs.readFileSync(DB_PATH, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        return { documents: [] };
    }
}

function writeDatabase(data) {
    try {
        fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getContentType(ext) {
    const types = {
        '.html': 'text/html; charset=utf-8',
        '.css': 'text/css; charset=utf-8',
        '.js': 'application/javascript; charset=utf-8',
        '.json': 'application/json; charset=utf-8',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.gif': 'image/gif',
        '.pdf': 'application/pdf',
        '.doc': 'application/msword',
        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        '.ppt': 'application/vnd.ms-powerpoint',
        '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        '.txt': 'text/plain; charset=utf-8'
    };
    return types[ext] || 'application/octet-stream';
}

function sendJSONResponse(res, statusCode, data) {
    res.writeHead(statusCode, {
        'Content-Type': 'application/json; charset=utf-8',
        'Access-Control-Allow-Origin': '*'
    });
    res.end(JSON.stringify(data));
}

function sendError(res, statusCode, message) {
    sendJSONResponse(res, statusCode, { 
        success: false, 
        error: message 
    });
}

function sendSuccess(res, data = {}) {
    sendJSONResponse(res, 200, { 
        success: true, 
        ...data 
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ multipart/form-data
function parseMultipartFormData(body, contentType) {
    const boundary = contentType.split('boundary=')[1];
    if (!boundary) return null;

    const parts = body.split('--' + boundary);
    const result = {};

    for (const part of parts) {
        if (part.includes('Content-Disposition')) {
            const lines = part.split('\r\n');
            let name = null;
            let value = '';
            let isFile = false;
            let filename = null;

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                
                if (line.includes('Content-Disposition')) {
                    const nameMatch = line.match(/name="([^"]+)"/);
                    if (nameMatch) name = nameMatch[1];
                    
                    const filenameMatch = line.match(/filename="([^"]+)"/);
                    if (filenameMatch) {
                        isFile = true;
                        filename = filenameMatch[1];
                    }
                }
                
                if (line === '' && i + 1 < lines.length) {
                    // –≠—Ç–æ –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
                    value = lines.slice(i + 1, -1).join('\r\n');
                    break;
                }
            }

            if (name) {
                if (isFile && filename) {
                    result[name] = {
                        filename: filename,
                        data: value,
                        isFile: true
                    };
                } else {
                    result[name] = value.trim();
                }
            }
        }
    }

    return result;
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function handleAdminLogin(req, res) {
    let body = '';
    
    req.on('data', chunk => {
        body += chunk.toString();
    });
    
    req.on('end', () => {
        try {
            const { password } = JSON.parse(body);
            
            if (password === ADMIN_PASSWORD) {
                sendSuccess(res, { message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' });
            } else {
                sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            sendError(res, 400, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
    });
}

function handleGetDocuments(req, res) {
    try {
        const db = readDatabase();
        console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã:', db.documents.length);
        sendSuccess(res, { documents: db.documents });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        sendError(res, 500, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–û–ö–£–ú–ï–ù–¢–û–í
function handleUploadDocument(req, res) {
    const contentType = req.headers['content-type'] || '';
    let body = '';

    req.on('data', chunk => {
        body += chunk.toString('binary');
    });

    req.on('end', () => {
        try {
            let documentName, documentCategory, uploadedFile;

            if (contentType.includes('multipart/form-data')) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)
                console.log('üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data');
                const formData = parseMultipartFormData(body, contentType);
                
                if (!formData) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç form-data');
                }

                documentName = formData.documentName;
                documentCategory = formData.documentCategory;
                
                if (formData.documentFile && formData.documentFile.isFile) {
                    uploadedFile = formData.documentFile;
                }
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                console.log('üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö');
                const data = JSON.parse(body || '{}');
                documentName = data.documentName;
                documentCategory = data.documentCategory;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!documentName) {
                return sendError(res, 400, '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
            }

            if (!documentCategory) {
                documentCategory = 'general';
            }

            const db = readDatabase();
            let filename, fileType, originalName;

            if (uploadedFile) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                originalName = uploadedFile.filename;
                fileType = path.extname(originalName).toLowerCase().substring(1) || 'file';
                filename = 'doc-' + Date.now() + '-' + Math.random().toString(36).substring(2, 15) + path.extname(originalName);
                const filePath = path.join(UPLOADS_DIR, filename);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                fs.writeFileSync(filePath, uploadedFile.data, 'binary');
                console.log('‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', filename);
            } else {
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                originalName = 'document.txt';
                fileType = 'txt';
                filename = 'doc-' + Date.now() + '.txt';
                const filePath = path.join(UPLOADS_DIR, filename);
                fs.writeFileSync(filePath, '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç');
            }

            const newDocument = {
                id: Date.now().toString(),
                name: documentName,
                originalName: originalName,
                filename: filename,
                type: fileType,
                category: documentCategory,
                url: '/uploads/' + filename,
                uploadDate: new Date().toISOString(),
                isNew: true
            };

            db.documents.unshift(newDocument);
            const writeSuccess = writeDatabase(db);

            if (writeSuccess) {
                console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É:', newDocument.name);
                sendSuccess(res, { 
                    document: newDocument,
                    message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
                });
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            sendError(res, 500, error.message);
        }
    });

    req.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        sendError(res, 500, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    });
}

function handleDeleteDocument(req, res, documentId) {
    try {
        const db = readDatabase();
        const documentIndex = db.documents.findIndex(doc => doc.id === documentId);
        
        if (documentIndex === -1) {
            return sendError(res, 404, '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const document = db.documents[documentIndex];
        
        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
            const filePath = path.join(UPLOADS_DIR, document.filename);
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
                console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω:', document.filename);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        }

        db.documents.splice(documentIndex, 1);
        const writeSuccess = writeDatabase(db);

        if (writeSuccess) {
            sendSuccess(res, { message: '–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω' });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        sendError(res, 500, error.message);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í
function serveStaticFile(res, filePath) {
    try {
        if (fs.existsSync(filePath) && fs.statSync(filePath).isFile()) {
            const content = fs.readFileSync(filePath);
            const ext = path.extname(filePath).toLowerCase();
            const contentType = getContentType(ext);
            
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(content);
            console.log('‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', filePath);
            return true;
        }
        return false;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer((req, res) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const pathname = url.pathname;
    
    console.log(`üì® ${req.method} ${pathname}`);
    
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // API routes
    if (pathname === '/api/admin/login' && req.method === 'POST') {
        handleAdminLogin(req, res);
        return;
    }
    
    if (pathname === '/api/documents' && req.method === 'GET') {
        handleGetDocuments(req, res);
        return;
    }
    
    if (pathname === '/api/documents' && req.method === 'POST') {
        handleUploadDocument(req, res);
        return;
    }
    
    if (pathname.startsWith('/api/documents/') && req.method === 'DELETE') {
        const documentId = pathname.split('/')[3];
        handleDeleteDocument(req, res, documentId);
        return;
    }
    
    // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (pathname.startsWith('/uploads/') && req.method === 'GET') {
        const filename = pathname.replace('/uploads/', '');
        const filePath = path.join(UPLOADS_DIR, filename);
        
        console.log('üìÇ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞:', filename);
        
        try {
            if (fs.existsSync(filePath)) {
                const content = fs.readFileSync(filePath);
                const ext = path.extname(filePath).toLowerCase();
                const contentType = getContentType(ext);
                
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(content);
                console.log('‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', filename);
            } else {
                console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('File not found');
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            res.writeHead(404);
            res.end('File not found');
        }
        return;
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–£–¢–ò
    if (req.method === 'GET') {
        let filePath;
        let served = false;

        // –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å - –∏—â–µ–º –≤ –ø–∞–ø–∫–µ frontend
        if (pathname === '/') {
            filePath = path.join(FRONTEND_DIR, 'index.html');
        } else {
            filePath = path.join(FRONTEND_DIR, pathname.slice(1));
        }

        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å
        if (serveStaticFile(res, filePath)) {
            served = true;
        } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
            const alternativePaths = [
                path.join(__dirname, pathname === '/' ? 'index.html' : pathname.slice(1)),
                path.join(__dirname, 'frontend', pathname === '/' ? 'index.html' : pathname.slice(1)),
                path.join(FRONTEND_DIR, 'index.html'),
                path.join(FRONTEND_DIR, 'admin.html'),
                path.join(__dirname, 'index.html'),
                path.join(__dirname, 'admin.html')
            ];

            for (const tryPath of alternativePaths) {
                if (serveStaticFile(res, tryPath)) {
                    served = true;
                    break;
                }
            }
        }

        if (!served) {
            console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—É—Ç–µ–π:', pathname);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ frontend
            let frontendFiles = [];
            try {
                frontendFiles = fs.readdirSync(FRONTEND_DIR).filter(file => 
                    file.endsWith('.html') || file.endsWith('.css') || file.endsWith('.js')
                );
            } catch (error) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É frontend');
            }
            
            res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Document Viewer</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; background: #f0f0f0; }
                        .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; }
                        .error { color: #e74c3c; }
                        .info { color: #3498db; }
                        ul { text-align: left; display: inline-block; }
                        a { color: #3498db; text-decoration: none; }
                        a:hover { text-decoration: underline; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üìÅ Document Viewer</h1>
                        <p class="info">–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
                        <p class="error">–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pathname}</p>
                        <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ frontend:</p>
                        <ul>
                            ${frontendFiles.map(file => `<li><a href="/${file}">${file}</a></li>`).join('')}
                        </ul>
                        <p style="margin-top: 20px;">
                            <strong>–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</strong><br>
                            <a href="/index.html">–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a> | 
                            <a href="/admin.html">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>
                        </p>
                    </div>
                </body>
                </html>
            `);
        }
        return;
    }
    
    res.writeHead(404);
    res.end('Not found');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
initDatabase();

server.listen(PORT, '0.0.0.0', () => {
    const localIP = getLocalIP();
    
    console.log('=== üåê –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò ===');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:${PORT}`);
    console.log(`üìç –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: http://${localIP}:${PORT}`);
    console.log(`üìç –ê–¥–º–∏–Ω–∫–∞: http://localhost:${PORT}/admin.html`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∫–∏: ${ADMIN_PASSWORD}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ HTML —Ñ–∞–π–ª—ã –≤ frontend
    let frontendFiles = [];
    try {
        frontendFiles = fs.readdirSync(FRONTEND_DIR).filter(file => file.endsWith('.html'));
        console.log(`üìÑ HTML —Ñ–∞–π–ª—ã –≤ frontend: ${frontendFiles.join(', ')}`);
    } catch (error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É frontend');
    }
    
    const db = readDatabase();
    console.log(`üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${db.documents.length}`);
    
    let uploadsFiles = [];
    try {
        uploadsFiles = fs.readdirSync(UPLOADS_DIR);
    } catch (error) {
        console.log('üìÇ –ü–∞–ø–∫–∞ uploads –ø—É—Å—Ç–∞');
    }
    console.log(`üìÇ –§–∞–π–ª–æ–≤ –≤ uploads: ${uploadsFiles.length}`);
    
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('====================================');
});

function getLocalIP() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const interface of interfaces[name]) {
            if (interface.family === 'IPv4' && !interface.internal) {
                return interface.address;
            }
        }
    }
    return 'localhost';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});