let documents = [];
let isAuthenticated = false;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    loginSection: document.getElementById('loginSection'),
    adminContent: document.getElementById('adminContent'),
    loginForm: document.getElementById('loginForm'),
    adminPassword: document.getElementById('adminPassword'),
    uploadForm: document.getElementById('uploadForm'),
    documentName: document.getElementById('documentName'),
    documentFile: document.getElementById('documentFile'),
    documentCategory: document.getElementById('documentCategory'),
    documentsList: document.getElementById('documentsList')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initAdmin() {
    setupEventListeners();
    checkAuth();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const savedAuth = localStorage.getItem('adminAuthenticated');
    if (savedAuth === 'true') {
        isAuthenticated = true;
        showAdminContent();
    } else {
        showLoginForm();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
function showLoginForm() {
    elements.loginSection.style.display = 'block';
    elements.adminContent.style.display = 'none';
    isAuthenticated = false;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∫–∏
function showAdminContent() {
    elements.loginSection.style.display = 'none';
    elements.adminContent.style.display = 'block';
    isAuthenticated = true;
    loadDocuments();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function setupEventListeners() {
    elements.loginForm.addEventListener('submit', handleLogin);
    if (elements.uploadForm) {
        elements.uploadForm.addEventListener('submit', handleFileUpload);
    }
    
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    elements.documentFile.addEventListener('change', function(e) {
        if (e.target.files.length > 0 && !elements.documentName.value) {
            const fileName = e.target.files[0].name;
            // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
            elements.documentName.value = nameWithoutExt;
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
async function handleLogin(e) {
    e.preventDefault();
    
    const password = elements.adminPassword.value;

    try {
        const response = await fetch('/api/admin/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ password })
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        }

        const result = await response.json();

        if (result.success) {
            localStorage.setItem('adminAuthenticated', 'true');
            isAuthenticated = true;
            showAdminContent();
        } else {
            alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
            elements.adminPassword.value = '';
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function loadDocuments() {
    if (!isAuthenticated) return;
    
    try {
        const response = await fetch('/api/documents');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        documents = await response.json();
        renderDocumentsList();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        documents = [];
        renderDocumentsList();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
function renderDocumentsList() {
    if (!isAuthenticated) return;
    
    if (documents.length === 0) {
        elements.documentsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìÇ</div>
                <h3>–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</p>
            </div>
        `;
        return;
    }
    
    elements.documentsList.innerHTML = documents.map(doc => `
        <div class="document-card">
            <div class="preview-content">
                ${getDocumentPreview(doc)}
            </div>
            <div class="document-info">
                <div class="document-name">${escapeHtml(doc.name)}</div>
                <div class="document-meta">
                    ${getCategoryName(doc.category)} ‚Ä¢ ${new Date(doc.uploadDate).toLocaleDateString('ru-RU')}
                </div>
                <div class="document-actions">
                    <button onclick="previewDocument('${doc.id}')" class="btn-view">
                        üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                    <button onclick="confirmDelete('${doc.id}')" class="btn-delete">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
function getDocumentPreview(doc) {
    if (doc.type === 'pdf') {
        return `
            <div class="pdf-preview">
                <iframe src="${doc.url}" class="preview-iframe"></iframe>
                <div class="preview-overlay">
                    <div class="pdf-icon">üìÑ</div>
                </div>
            </div>
        `;
    } else if (['jpg', 'jpeg', 'png'].includes(doc.type)) {
        return `<img src="${doc.url}" alt="${doc.name}" class="preview-thumbnail" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <div class="preview-icon-large" style="display: none;">${getDocumentIcon(doc.type)}</div>`;
    } else {
        return `
            <div class="preview-icon-large">${getDocumentIcon(doc.type)}</div>
        `;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(category) {
    const categories = {
        'general': '–û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
        'contracts': '–î–æ–≥–æ–≤–æ—Ä—ã',
        'reports': '–û—Ç—á–µ—Ç—ã',
        'presentations': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'
    };
    return categories[category] || category;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
function getDocumentIcon(type) {
    const icons = {
        'pdf': 'üìÑ',
        'doc': 'üìù',
        'docx': 'üìù',
        'ppt': 'üìä',
        'pptx': 'üìä',
        'jpg': 'üñºÔ∏è',
        'jpeg': 'üñºÔ∏è',
        'png': 'üñºÔ∏è',
        'file': 'üìÅ'
    };
    return icons[type] || 'üìÅ';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
async function handleFileUpload(e) {
    e.preventDefault();
    
    if (!isAuthenticated) {
        alert('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
    }
    
    const name = elements.documentName.value.trim();
    const file = elements.documentFile.files[0];
    const category = elements.documentCategory.value;

    if (!file) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
        return;
    }

    if (!name) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        return;
    }

    try {
        const formData = new FormData();
        formData.append('documentName', name);
        formData.append('documentCategory', category);
        formData.append('documentFile', file);

        const response = await fetch('/api/documents', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }

        const result = await response.json();

        if (result.success) {
            alert('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
            elements.uploadForm.reset();
            await loadDocuments();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
function previewDocument(docId) {
    const doc = documents.find(d => d.id === docId);
    if (doc) {
        window.open(doc.url, '_blank');
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
function confirmDelete(docId) {
    const doc = documents.find(d => d.id === docId);
    if (!doc) return;
    
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "${doc.name}"?`)) {
        deleteDocument(docId);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function deleteDocument(docId) {
    if (!isAuthenticated) {
        alert('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
    }
    
    try {
        const response = await fetch(`/api/documents/${docId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }

        const result = await response.json();

        if (result.success) {
            alert('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!');
            await loadDocuments();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', initAdmin);