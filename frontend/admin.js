let documents = [];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    uploadForm: document.getElementById('uploadForm'),
    documentName: document.getElementById('documentName'),
    documentFile: document.getElementById('documentFile'),
    documentCategory: document.getElementById('documentCategory'),
    documentsList: document.getElementById('documentsList')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function initAdmin() {
    setupEventListeners();
    await loadDocumentsList();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    elements.uploadForm.addEventListener('submit', handleFileUpload);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function loadDocumentsList() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
        const response = await fetch('/api/documents');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        documents = await response.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        renderDocumentsList();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        documents = [];
        renderDocumentsList();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
function renderDocumentsList() {
    if (documents.length === 0) {
        elements.documentsList.innerHTML = `
            <div style="text-align: center; color: #7f8c8d; padding: 40px;">
                <div style="font-size: 48px; margin-bottom: 20px;">üìÇ</div>
                <h3>–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
                <p>–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</p>
            </div>
        `;
        return;
    }
    
    elements.documentsList.innerHTML = documents.map(doc => `
        <div class="preview-card">
            <div class="preview-icon">${getDocumentIcon(doc.type)}</div>
            <div class="preview-title">${escapeHtml(doc.name)}</div>
            <div class="preview-meta">
                ${doc.category} ‚Ä¢ ${new Date(doc.uploadDate).toLocaleDateString('ru-RU')}
            </div>
            <div style="display: flex; gap: 10px; margin-top: 15px;">
                <button onclick="previewDocument('${doc.id}')" 
                        style="flex: 1; padding: 8px; background: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                </button>
                <button onclick="deleteDocument('${doc.id}')" 
                        style="flex: 1; padding: 8px; background: #e74c3c; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
async function handleFileUpload(e) {
    e.preventDefault();
    
    const name = elements.documentName.value.trim() || '–î–æ–∫—É–º–µ–Ω—Ç ' + new Date().toLocaleDateString();
    const file = elements.documentFile.files[0];
    const category = elements.documentCategory.value;

    if (!file) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
        return;
    }

    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        const formData = new FormData();
        formData.append('documentName', name);
        formData.append('documentCategory', category);
        formData.append('file', file);

        const response = await fetch('/api/documents', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            alert('‚úÖ ' + (result.message || '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!'));
            elements.uploadForm.reset();
            await loadDocumentsList();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
function getDocumentIcon(type) {
    const icons = {
        'pdf': 'üìÑ',
        'doc': 'üìù',
        'docx': 'üìù',
        'ppt': 'üìä',
        'pptx': 'üìä',
        'jpg': 'üñºÔ∏è',
        'jpeg': 'üñºÔ∏è',
        'png': 'üñºÔ∏è',
        'file': 'üìÅ'
    };
    return icons[type] || 'üìÅ';
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
function previewDocument(docId) {
    const doc = documents.find(d => d.id === docId);
    if (!doc) return;
    
    window.open(doc.url, '_blank');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function deleteDocument(docId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?')) {
        try {
            const response = await fetch(`/api/documents/${docId}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (result.success) {
                alert('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!');
                await loadDocumentsList();
            } else {
                alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        }
    }
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', initAdmin);