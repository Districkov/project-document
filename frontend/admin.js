class AdminPanel {
    constructor() {
        this.documents = [];
        this.isAuthenticated = false;
        this.apiBase = '/api';
        
        this.elements = {
            loginSection: document.getElementById('loginSection'),
            adminContent: document.getElementById('adminContent'),
            loginForm: document.getElementById('loginForm'),
            adminPassword: document.getElementById('adminPassword'),
            uploadForm: document.getElementById('uploadForm'),
            documentName: document.getElementById('documentName'),
            documentFile: document.getElementById('documentFile'),
            documentCategory: document.getElementById('documentCategory'),
            documentsList: document.getElementById('documentsList'),
            documentsCount: document.getElementById('documentsCount')
        };

        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.checkAuth();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        this.elements.loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        
        // –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if (this.elements.uploadForm) {
            this.elements.uploadForm.addEventListener('submit', (e) => this.handleFileUpload(e));
        }
        
        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞
        this.elements.documentFile.addEventListener('change', (e) => {
            if (e.target.files.length > 0 && !this.elements.documentName.value) {
                const fileName = e.target.files[0].name;
                const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
                this.elements.documentName.value = nameWithoutExt;
            }
        });

        // –í—ã—Ö–æ–¥ –ø–æ Ctrl+D (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'd') {
                this.logout();
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    async checkAuth() {
        const savedAuth = localStorage.getItem('adminAuthenticated');
        if (savedAuth === 'true') {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            try {
                await this.verifyAuth();
                this.isAuthenticated = true;
                this.showAdminContent();
            } catch (error) {
                console.log('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥');
                this.logout();
            }
        } else {
            this.showLoginForm();
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async verifyAuth() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        await this.loadDocuments();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    showLoginForm() {
        this.elements.loginSection.style.display = 'block';
        this.elements.adminContent.style.display = 'none';
        this.isAuthenticated = false;
        this.elements.adminPassword.focus();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∫–∏
    showAdminContent() {
        this.elements.loginSection.style.display = 'none';
        this.elements.adminContent.style.display = 'block';
        this.isAuthenticated = true;
        this.loadDocuments();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
    async handleLogin(e) {
        e.preventDefault();
        
        const password = this.elements.adminPassword.value.trim();
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;

        if (!password) {
            this.showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        submitBtn.innerHTML = '<div class="loading"></div> –í—Ö–æ–¥...';
        submitBtn.disabled = true;

        try {
            const response = await fetch(`${this.apiBase}/admin/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ password })
            });

            const result = await response.json();

            if (result.success) {
                localStorage.setItem('adminAuthenticated', 'true');
                this.isAuthenticated = true;
                this.showAdminContent();
                this.showNotification('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', 'success');
            } else {
                throw new Error(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.showNotification(`‚ùå ${error.message}`, 'error');
            this.elements.adminPassword.value = '';
            this.elements.adminPassword.focus();
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout() {
        localStorage.removeItem('adminAuthenticated');
        this.isAuthenticated = false;
        this.showLoginForm();
        this.showNotification('üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async loadDocuments() {
        if (!this.isAuthenticated) return;
        
        try {
            const response = await fetch(`${this.apiBase}/documents`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                this.documents = result.documents || [];
                this.renderDocumentsList();
            } else {
                throw new Error(result.error || 'Unknown error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
            this.showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'error');
            this.documents = [];
            this.renderDocumentsList();
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    renderDocumentsList() {
        if (!this.isAuthenticated) return;
        
        const count = this.documents.length;
        this.elements.documentsCount.textContent = `${count} ${this.getPluralForm(count, ['–¥–æ–∫—É–º–µ–Ω—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'])}`;
        
        if (this.documents.length === 0) {
            this.elements.documentsList.innerHTML = `
                <div class="empty-state" style="display: block; margin: 40px 0;">
                    <div class="empty-icon">üìÇ</div>
                    <h3>–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
                    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º—ã –≤—ã—à–µ</p>
                </div>
            `;
            return;
        }
        
        this.elements.documentsList.innerHTML = this.documents.map(doc => `
            <div class="document-card">
                <div class="preview-content">
                    ${this.getDocumentPreview(doc)}
                </div>
                <div class="document-info">
                    <div class="document-name">${this.escapeHtml(doc.name)}</div>
                    <div class="document-meta">
                        ${this.getCategoryName(doc.category)} ‚Ä¢ 
                        ${new Date(doc.uploadDate).toLocaleDateString('ru-RU', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        })}
                    </div>
                    <div class="document-actions">
                        <button onclick="adminPanel.previewDocument('${doc.id}')" class="btn-view">
                            üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                        <button onclick="adminPanel.confirmDelete('${doc.id}')" class="btn-delete">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
    getDocumentPreview(doc) {
        const fileType = doc.type.toLowerCase();
        
        if (fileType === 'pdf') {
            return `
                <div class="pdf-preview">
                    <div class="preview-overlay">
                        <div class="pdf-icon">üìÑ</div>
                    </div>
                </div>
            `;
        } else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileType)) {
            return `
                <img src="${doc.url}" alt="${this.escapeHtml(doc.name)}" 
                     class="preview-thumbnail"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <div class="preview-icon-large" style="display: none;">${this.getDocumentIcon(fileType)}</div>
            `;
        } else {
            return `
                <div class="preview-icon-large">${this.getDocumentIcon(fileType)}</div>
            `;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    getDocumentIcon(type) {
        const icons = {
            'pdf': 'üìÑ',
            'doc': 'üìù',
            'docx': 'üìù',
            'ppt': 'üìä',
            'pptx': 'üìä',
            'jpg': 'üñºÔ∏è',
            'jpeg': 'üñºÔ∏è',
            'png': 'üñºÔ∏è',
            'gif': 'üñºÔ∏è',
            'txt': 'üìÑ',
            'file': 'üìÅ'
        };
        return icons[type] || 'üìÅ';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryName(category) {
        const categories = {
            'general': 'üìÑ –û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            'contracts': 'üìù –î–æ–≥–æ–≤–æ—Ä—ã',
            'reports': 'üìä –û—Ç—á–µ—Ç—ã',
            'presentations': 'üéØ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
            'instructions': 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
        };
        return categories[category] || category;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    async handleFileUpload(e) {
        e.preventDefault();
        
        if (!this.isAuthenticated) {
            this.showNotification('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            return;
        }
        
        const name = this.elements.documentName.value.trim();
        const file = this.elements.documentFile.files[0];
        const category = this.elements.documentCategory.value;
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!file) {
            this.showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
            return;
        }

        if (!name) {
            this.showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB)
        if (file.size > 50 * 1024 * 1024) {
            this.showNotification('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)', 'error');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        submitBtn.innerHTML = '<div class="loading"></div> –ó–∞–≥—Ä—É–∑–∫–∞...';
        submitBtn.disabled = true;

        try {
            const formData = new FormData();
            formData.append('documentName', name);
            formData.append('documentCategory', category);
            formData.append('documentFile', file);

            const response = await fetch(`${this.apiBase}/documents`, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                this.showNotification('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
                this.elements.uploadForm.reset();
                await this.loadDocuments();
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            this.showNotification(`‚ùå ${error.message}`, 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    previewDocument(docId) {
        const doc = this.documents.find(d => d.id === docId);
        if (doc && doc.url) {
            window.open(doc.url, '_blank');
        } else {
            this.showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', 'error');
        }
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    confirmDelete(docId) {
        const doc = this.documents.find(d => d.id === docId);
        if (!doc) return;
        
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "${doc.name}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            this.deleteDocument(docId);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async deleteDocument(docId) {
        if (!this.isAuthenticated) {
            this.showNotification('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            return;
        }
        
        try {
            const response = await fetch(`${this.apiBase}/documents/${docId}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (result.success) {
                this.showNotification('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω', 'success');
                await this.loadDocuments();
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            this.showNotification(`‚ùå ${error.message}`, 'error');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1001;
            animation: slideInRight 0.3s ease;
        `;

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }
        }, 3000);
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
    getPluralForm(number, forms) {
        const cases = [2, 0, 1, 1, 1, 2];
        return forms[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[Math.min(number % 10, 5)]];
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
const adminStyles = `
    .loading {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid #f3f3f3;
        border-top: 2px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 8px;
        vertical-align: middle;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .documents-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const adminStyleSheet = document.createElement('style');
adminStyleSheet.textContent = adminStyles;
document.head.appendChild(adminStyleSheet);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
let adminPanel;

document.addEventListener('DOMContentLoaded', () => {
    adminPanel = new AdminPanel();
});